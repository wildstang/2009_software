//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang
//  @ File Name : WsAutoOutpostOutpostBase.cpp
//  @ Date : 2/8/2009
//  @ Author : 
//
//


#include "Timer.h"
#include "WsAutoOutpostOutpostBase.h"
#include "WsDriveBaseCrabSingle.h"
#include "WsAccumulator.h"
#include "WsEscalator.h"
#include "WsElevator.h"
#include "WsShooter.h"
#include "WsDriveVector.h"
#include "WsDashboard.h"

WsAutoOutpostOutpostBase::WsAutoOutpostOutpostBase()
{
    a_progState = AUTO_STATE_INIT;
    a_encoderCount = 0;
    a_timerCount = 0;

    ap_dashboard = WsDashboard::getInstance();
}

WsAutoOutpostOutpostBase::~WsAutoOutpostOutpostBase()
{
}

void WsAutoOutpostOutpostBase::initParams(void)
{
    printf("BASE INIT\n");
    a_initDelay = 0;

    a_initAccumState = WsAccumulator::ACCUM_STATE_IN;
    a_initEscFrontSpeed = WsEscalator::a_escFullUp;
    a_initEscBackSpeed = WsEscalator::a_escFullUp;
    a_initShooterState = WsShooter::SHOOTER_STATE_OFF;
    a_initElevLeftState = WsElevator::ELEVATOR_STATE_OFF;
    a_initElevRightState = WsElevator::ELEVATOR_STATE_OFF;

    a_drive1CrabAngle = 0;
    a_drive1Vector.a_speed = 0;
    a_drive1Vector.a_direction = 0;
    a_drive1Timeout = 0;
    a_drive2Pause = 0;
    a_drive2CrabAngle = 0;
    a_drive2Vector.a_speed = 0;
    a_drive2Vector.a_direction = 0;
    a_drive2Timeout = 0;
}

bool WsAutoOutpostOutpostBase::run(void )
{
    bool done = false;
    double time = 0;

    switch(a_progState)
    {
        case AUTO_STATE_INIT:
            // Set appendage states while delaying
            if(ap_accumulator != NULL)
            {
                ap_accumulator->setState(a_initAccumState);
            }

            if(ap_escalator != NULL)
            {
                float front, back;
                ap_escalator->setSpeed(a_initEscFrontSpeed, a_initEscBackSpeed, &front, &back);
            }

            if(ap_elevatorLeft != NULL)
            {
                ap_elevatorLeft->setState(a_initElevLeftState);
            }

            if(ap_elevatorRight != NULL)
            {
                ap_elevatorRight->setState(a_initElevRightState);
            }

            if(ap_shooter != NULL)
            {
                ap_shooter->setState(a_initShooterState);
            }

            turnOffDriveBase();

            a_progState = AUTO_STATE_INIT_DELAY;

            break;
        case AUTO_STATE_INIT_DELAY:
            turnOffDriveBase();

            if (delay(a_initDelay, &time) == true)
            {
                a_progState = AUTO_STATE_DRIVE1;
            }
            //printf("DELAY %3.3f (%3.3f)\n", time, a_initDelay);
            break;
        case AUTO_STATE_DRIVE1:
            if(driveByTime(&a_drive1Vector, a_drive1CrabAngle,
                           a_drive1Timeout, &time) == true)
            {
                a_progState = AUTO_STATE_DRIVE2_DELAY;
            }
            break;
        case AUTO_STATE_DRIVE2_DELAY:
            turnOffDriveBase();

            if (delay(a_drive2Pause, &time) == true)
            {
                a_progState = AUTO_STATE_DRIVE2;
            }
            break;
        case AUTO_STATE_DRIVE2:
            if(driveByTime(&a_drive2Vector, a_drive2CrabAngle,
                           a_drive2Timeout, &time) == true)
            {
                a_progState = AUTO_STATE_DONE;
            }
            break;
        case AUTO_STATE_DONE:
            turnOffDriveBase();
            done = true;
            break;
        default:
            a_progState = AUTO_STATE_DONE;
            break;
    }

    ap_dashboard->setValue(IDX_AUTO_PROGSTATE, (UINT32)a_progState);
    ap_dashboard->setValue(IDX_AUTO_DATA1, (float)time);
    ap_dashboard->setValue(IDX_AUTO_BOOL_DATA1, ap_driveBase == NULL);
    ap_dashboard->setValue(IDX_AUTO_BOOL_DATA2, ap_driveBase != NULL);

    return done;
}

