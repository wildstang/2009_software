//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang 2009
//  @ File Name : WsDriveBaseCrabSingle.cpp
//  @ Date : 1/14/2009
//  @ Author : 
//
//


#include "WsTrig.h"
#include "WsDriveBaseCrabSingle.h"
#include "WsCrabController.h"
#include "WsDriveVector.h"

WsDriveBaseCrabSingle::WsDriveBaseCrabSingle(WsTractionWheel* p_lf,
    WsTractionWheel* p_lb, WsTractionWheel* p_rf, WsTractionWheel* p_rb,
    WsCrabController* p_crabController) :
                       WsDriveBaseTank(p_lf, p_lb, p_rf, p_rb)
{
    ap_crabController = p_crabController;
    a_crabAngle = 0;
    a_is_crabbed_thresh = 30;
}

WsDriveBaseCrabSingle::~WsDriveBaseCrabSingle()
{
}

void WsDriveBaseCrabSingle::setCrabAngle(float angle)
{
    a_crabAngle = angle;
    ap_crabController->setAngle(a_crabAngle);
}

void WsDriveBaseCrabSingle::setManualSpeed(float speed)
{
    /* Crab is disabled, set angle to 0 */
    a_crabAngle = 0;
    ap_crabController->setOutputSpeed(speed);
}

void WsDriveBaseCrabSingle::setVector(WsDriveVector* p_vector)
{
    float l_speed = 0;
    float r_speed = 0;
    WsDriveVector v;
    v.a_speed = p_vector->a_speed;
    v.a_direction = p_vector->a_direction;

    if ((a_crabAngle < a_is_crabbed_thresh) &&
        (a_crabAngle > -a_is_crabbed_thresh))
    {
        /* Crab wheels straight or crab disabled */
        calcTankOutput(&v, &l_speed, &r_speed);
        setTankOutput(l_speed, l_speed, r_speed, r_speed);
    }

    else if ((a_crabAngle > (-90 - a_is_crabbed_thresh)) &&
             (a_crabAngle < (-90 + a_is_crabbed_thresh)))
    {
        /* Crabbed left */
        calcTankOutput(&v, &l_speed, &r_speed);
        setTankOutput(r_speed, l_speed, r_speed, l_speed);
    }

    else if ((a_crabAngle > (90 - a_is_crabbed_thresh)) &&
             (a_crabAngle < (90 + a_is_crabbed_thresh)))
    {
        /* Crabbed right */
        calcTankOutput(&v, &l_speed, &r_speed);
        setTankOutput(l_speed, r_speed, l_speed, r_speed);
    }

    else
    {
        /* Crabbed in between */
        if ((v.a_direction >= -90) && (v.a_direction <= 90))
        {
            /* Drive vector in upper half of unit circle */
            v.a_speed = (v.a_speed * COSDEG(fabs(v.a_direction)));
        }
        else
        {
            v.a_speed = -(v.a_speed * COSDEG(180 - (fabs(v.a_direction))));
        }
        if (v.a_speed >= 0)
        {
            v.a_direction = 0;
        }
        else
        {
            v.a_direction = 180;
            v.a_speed *= -1;
        }
        calcTankOutput(&v, &l_speed, &r_speed);
        setTankOutput(l_speed, l_speed, r_speed, r_speed);
    }
}
