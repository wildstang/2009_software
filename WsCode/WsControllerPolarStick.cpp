//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang 2009
//  @ File Name : WsControllerPolarStick.cpp
//  @ Date : 1/17/2009
//  @ Author : 
//
//


#include "WsControllerPolarStick.h"
#include "WsControllerAxis.h"

WsControllerPolarStick::WsControllerPolarStick(WsControllerAxis* xAxis, WsControllerAxis* yAxis)
{
    ap_xAxis = xAxis;
    ap_yAxis = yAxis;
}

WsControllerPolarStick::~WsControllerPolarStick()
{
}

float WsControllerPolarStick::getX()
{
    float x = 0;

    if(ap_xAxis != NULL)
    {
        x = ap_xAxis->getValue();
    }

    return x;
}

float WsControllerPolarStick::getY()
{
    float y = 0;

    if(ap_yAxis != NULL)
    {
        y = ap_yAxis->getValue();
    }

    return y;
}

float WsControllerPolarStick::getRadius()
{
    float x = 0;
    float y = 0;

    x = getX();
    y = getY();

    return calcRadius(x, -y);
}

float WsControllerPolarStick::getAngle()
{
    float x = 0;
    float y = 0;
    float angle = 0;

    x = getX();
    y = getY();

    /* calcAngle returns a value on this scale
                0
                |
                |
                |
      -90 ------------- 90
                |
                |
                |
                180
        */
    angle = calcAngle(-y, x);

    return angle;
}

float WsControllerPolarStick::calcRadius(float x, float y)
{
    //Calculate length of line from the center to our actual point
    float inputDistance = sqrt(pow(((float)fabs(x)), 2) + pow(((float)fabs(y)),2));
    if(inputDistance > BOUNDS)
    {
        inputDistance = BOUNDS;
    }
    else if(inputDistance < -BOUNDS)
    {
        inputDistance = -BOUNDS;
    }

    return inputDistance;
#if 0
    // This was copied from someone on CD

    //Convert x-y cartesian coordinate to a polar distance
    //from center.

    float edgePointX, edgePointY;

    //First calculate the slope
    //if one of the values is 0, respond appropriately so that
    //we don't have divide by 0 errors and such
    if(y == 0)
    {
        //If there is no Y factor
        if(x > 0)
            edgePointX = BOUNDS;
        else if(x < 0)
            edgePointX = -BOUNDS;
        else
            //Return 0 if both x and y inputs are 0
            return 0;

        edgePointY = 0;
    }
    else if(x == 0)
    {
        //If there is no X factor
        if(y > 0)
            edgePointY = BOUNDS;
        else if(y < 0)
            edgePointY = -BOUNDS;
        else
            //Return 0 if both x and y inputs are 0
            return 0;

        edgePointX = 0;
    }
    else
    {
        //If we have no 0 in x or y input, calculate slope
        //normally
        float slope = y / x;

        //Project a point along the line of our actual point
        //using the slope	

        if(slope >= 1.0f || slope <= -1.0f)
        {
            //If the point is on the top or bottom bounds
            edgePointX = BOUNDS / slope;
            edgePointY = BOUNDS;
        }
        else
        {
            //If the point is on the side bounds
            edgePointX = BOUNDS;
            edgePointY = BOUNDS * slope;
        }
    }

    //Calculate the length of the line from the center
    //to our edge point
    float edgeDistance = sqrt(pow(fabs(edgePointX), 2) + pow(fabs(edgePointY), 2));

    //Calculate length of line from the center to our actual point
    float inputDistance = sqrt(pow(((float)fabs(x)), 2) + pow(((float)fabs(y)),2));

    //Return the "polar distance" by finding the ratio of these two lines
    //and multiplying by the bound
    return BOUNDS * (inputDistance / edgeDistance);
#endif
}

float WsControllerPolarStick::calcAngle(float x, float y)
{
    float angle = 0;

    /* Expects inputs of 

                |
         -x, +y |   +x, +y
                |
          -------------
                |
         -x, -y |   +x, -y
                |


        Returns an angle on the scale

                0
                |
                |
                |
      -90 ------------- 90
                |
                |
                |
                180
    */

    if((x == 0) && (y == 0))
    {
        angle = 0;
    }
    else
    {
        angle = ATAN2DEG(y, x);
    }

    if(angle >= 360)
    {
        angle -= 360;
    }

    return angle;
}
