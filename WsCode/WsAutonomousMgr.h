//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang
//  @ File Name : WsAutonomousMgr.h
//  @ Date : 2/8/2009
//  @ Author : 
//
//


#if !defined(_WSAUTONOMOUSMGR_H)
#define _WSAUTONOMOUSMGR_H

#include <stdio.h>

class WsDsAnalog;
class WsDriveBaseCrabSingle;
class WsAccumulator;
class WsEscalator;
class WsElevator;
class WsShooter;
class WsControllerButton;
class WsAutoProgramBase;
class WsDashboard;
class WsDriverStationLED;

#define PROG_NAME_LEN 10

// Constants for autonomous program dial

#define PROG1_MIN 0
#define PROG1_MAX 50

#define PROG2_MIN (PROG1_MAX)
#define PROG2_MAX 110

#define PROG3_MIN (PROG2_MAX)
#define PROG3_MAX 200

#define PROG4_MIN (PROG3_MAX)
#define PROG4_MAX 300

#define PROG5_MIN (PROG4_MAX)
#define PROG5_MAX 400

#define PROG6_MIN (PROG5_MAX)
#define PROG6_MAX 480

#define PROG7_MIN (PROG6_MAX)
#define PROG7_MAX 570

#define PROG8_MIN (PROG7_MAX)
#define PROG8_MAX 660

#define PROG9_MIN (PROG8_MAX)
#define PROG9_MAX 760

#define PROG10_MIN (PROG9_MAX)
#define PROG10_MAX 860

#define PROG11_MIN (PROG10_MAX)
#define PROG11_MAX 1024

// Constants for autonomous starting position
#define POSITION1_MIN 0
#define POSITION1_MAX 300

#define POSITION2_MIN 301
#define POSITION2_MAX 700

#define POSITION3_MIN 701
#define POSITION3_MAX 1024

class WsAutonomousMgr
{
public:

    typedef enum
    {
        START_HOME,
        START_OUTPOST,
        START_OPP,
    } StartingPositionT;

    static const bool a_lockInStateOff = false;
    static const bool a_lockInStateOn = true;

    WsAutonomousMgr(WsDsAnalog* p_progNumSelector,
                    WsDsAnalog* p_positionSelector,
                    WsControllerButton* p_lockInSwitch,
                    WsDriverStationLED* p_lockInLed);

    ~WsAutonomousMgr();
    void assignDriveBase(WsDriveBaseCrabSingle* p_driveBase);
    void assignAccumulator(WsAccumulator* p_accum);
    void assignEscalator(WsEscalator* p_esc);
    void assignElevators(WsElevator* p_elevLeft, WsElevator* p_elevRight);
    void assignShooter(WsShooter* p_shooter);
    UINT8 getProgNum(void);
    void getProgName(char* p_name);
    bool getLockState(void);
    StartingPositionT getPosition(void);
    void processLockin(void );
    void beginAutonomous(void );
    bool run(void );
protected:
    WsDsAnalog* ap_progNumSelector;
    WsDsAnalog* ap_positionSelector;
    WsControllerButton* ap_lockInSwitch;
    WsDriverStationLED* ap_lockInLed;
    WsDriveBaseCrabSingle* ap_driveBase;
    WsAccumulator* ap_accumulator;
    WsEscalator* ap_escalator;
    WsElevator* ap_elevatorLeft;
    WsElevator* ap_elevatorRight;
    WsShooter* ap_shooter;
    WsAutoProgramBase* ap_program;

    UINT8 a_progNum;
    StartingPositionT a_position;
    UINT8 a_tempProgNum;
    StartingPositionT a_tempPosition;
    bool a_lockedIn;
    bool a_hasRun;

    char a_progName[PROG_NAME_LEN];

    WsDashboard* ap_dashboard;
};

#endif  //_WSAUTONOMOUSMGR_H
