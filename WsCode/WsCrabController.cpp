//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang 2009
//  @ File Name : WsCrabController.cpp
//  @ Date : 1/14/2009
//  @ Author : 
//
//


#include "WsCrabController.h"
#include "AnalogChannel.h"
#include "WsCalibration.h"
#include "WsSc.h"
#include "WsPot.h"
#include "WsPid.h"
#include "WsDashboard.h"

WsCrabController::WsCrabController(WsSc* p_sc, WsPot* p_pot)
{
    WsCrabController(p_sc, NULL, p_pot);
}
WsCrabController::WsCrabController(WsSc* p_scL, WsSc* p_scR, WsPot* p_pot)
{
    ap_crabScLeft = p_scL;
    ap_crabScRight = p_scR;
    ap_crabPot = p_pot;
    ap_pid = NULL;

    ap_dashboard = WsDashboard::getInstance();
    ap_calib = WsCalibration::getInstance();
    setOutputSpeed(0);
}

WsCrabController::~WsCrabController()
{
}

void WsCrabController::assignPid(WsPid* p_pid)
{
    ap_pid = p_pid;
    ap_pid->resetErrorSum();
}

void WsCrabController::setOutputSpeed(float speed)
{
    if(ap_crabScLeft != NULL)
    {
        ap_crabScLeft->Set(speed);
    }
    if(ap_crabScRight != NULL)
    {
        ap_crabScRight->Set(speed);
    }
    ap_dashboard->setValue(IDX_OUT_CRAB_SPEED_L, speed);
    ap_dashboard->setValue(IDX_OUT_CRAB_SPEED_R, speed);
}

void WsCrabController::setAngle(float angle)
{
    float output;
    UINT32 target;
    UINT32 pot_value;

    if(angle > CRAB_ANGLE_MAX)
    {
        angle = CRAB_ANGLE_MAX;
    }
    else if(angle < CRAB_ANGLE_MIN)
    {
        angle = CRAB_ANGLE_MIN;
    }

    pot_value = ap_crabPot->GetAverageValue();
    target = convertDegToPot(angle);
    if(pot_value > 1024)
    {
      output = 0;
    }
    else
    {
      ap_pid->setDesiredValue(target);

      output = ap_pid->calcPid(pot_value);

      if (ap_pid->isDone() == true)
      {
        output = 0;
      }
    }

    setOutputSpeed(output);

    //printf("A: %.6f T: %d\n", angle, target);

    ap_dashboard->setValue(IDX_PID_CRAB_TARGET, target);
    ap_dashboard->setValue(IDX_POT_CRAB_CUR, pot_value);
    ap_dashboard->setValue(IDX_POT_CRAB_CALIB_L,
                           ap_calib->getValue(WsCalibration::CRAB_LEFT));
    ap_dashboard->setValue(IDX_POT_CRAB_CALIB_M,
                           ap_calib->getValue(WsCalibration::CRAB_MID));
    ap_dashboard->setValue(IDX_POT_CRAB_CALIB_R,
                           ap_calib->getValue(WsCalibration::CRAB_RIGHT));
    ap_dashboard->setValue(IDX_PID_CRAB_P, ap_pid->getP());
    ap_dashboard->setValue(IDX_PID_CRAB_I, ap_pid->getI());
    ap_dashboard->setValue(IDX_PID_CRAB_D, ap_pid->getD());
    ap_dashboard->setValue(IDX_PID_CRAB_EPS, ap_pid->getEpsilon());
}

UINT32 WsCrabController::convertDegToPot(float angle)
{
    UINT32 calib_mid, calib_left, calib_right;
    UINT32 pot_val;

    calib_mid = ap_calib->getValue(WsCalibration::CRAB_MID);
    calib_left = ap_calib->getValue(WsCalibration::CRAB_LEFT);
    calib_right = ap_calib->getValue(WsCalibration::CRAB_RIGHT);

#if 1
    if (angle <= 0)
    {
        pot_val =  (UINT32)(calib_mid +
                   ((angle * (calib_mid - calib_left)) / 90.0));
        //printf("%5.3f %d %d -> %d\n", angle, calib_left, calib_mid, pot_val);

    }
    else
    {
        pot_val =  (UINT32)(calib_mid +
                   ((angle * (calib_right - calib_mid)) / 90.0));
    }
#else
    // This is for the way the pots were oriented on the 2008 proto
    if (angle <= 0)
    {
        pot_val =  (UINT32)(calib_mid -
                   ((angle * (calib_left - calib_mid)) / 90.0));

    }
    else
    {
        pot_val =  (UINT32)(calib_mid -
                   ((angle * (calib_mid - calib_right)) / 90.0));
    }
#endif

    return pot_val;
}
