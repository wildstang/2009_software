//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang 2009
//  @ File Name : WsDriveBaseTank.cpp
//  @ Date : 1/14/2009
//  @ Author : 
//
//


#include <math.h>
#include "WsDriveBaseTank.h"
#include "WsTractionWheel.h"
#include "WsDriveVector.h"
#include "WsTrig.h"
#include "WsDashboard.h"

#define TRACTION_DISABLE_RANGE  30
#define TRACTION_DISABLE_RANGE_PMIN  (90 - (TRACTION_DISABLE_RANGE))
#define TRACTION_DISABLE_RANGE_PMAX  (90 + (TRACTION_DISABLE_RANGE))
#define TRACTION_DISABLE_RANGE_NMIN  (-90 - (TRACTION_DISABLE_RANGE))
#define TRACTION_DISABLE_RANGE_NMAX  (-90 + (TRACTION_DISABLE_RANGE))


WsDriveBaseTank::WsDriveBaseTank(WsTractionWheel* p_lf, WsTractionWheel* p_lb,
                                 WsTractionWheel* p_rf, WsTractionWheel* p_rb)
{
    ap_scLF = p_lf;
    ap_scLB = p_lb;
    ap_scRF = p_rf;
    ap_scRB = p_rb;
    ap_dashboard = WsDashboard::getInstance();
}

WsDriveBaseTank::WsDriveBaseTank(WsTractionWheel* p_l, WsTractionWheel* p_r)
{
    ap_scLF = p_l;
    ap_scLB = p_l;
    ap_scRF = p_r;
    ap_scRB = p_r;
    ap_dashboard = WsDashboard::getInstance();
}

WsDriveBaseTank::~WsDriveBaseTank()
{
}

void WsDriveBaseTank::setVector(WsDriveVector* p_vector)
{
    float l_speed = 0;
    float r_speed = 0;

    calcTankOutput(p_vector, &l_speed, &r_speed);
    setTankOutput(l_speed, l_speed, r_speed, r_speed);
}

void WsDriveBaseTank::calcTankOutput(WsDriveVector* p_vector, float* p_lSpeed,
                    float* p_rSpeed)
{
    float l_speed = 0;
    float r_speed = 0;
    float speed = p_vector->a_speed;
    float direction = p_vector->a_direction;

    if(p_vector != NULL)
    {
      if(((p_vector->a_direction > TRACTION_DISABLE_RANGE_PMIN) &&
          (p_vector->a_direction < TRACTION_DISABLE_RANGE_PMAX)) ||
         ((p_vector->a_direction > TRACTION_DISABLE_RANGE_NMIN) &&
          (p_vector->a_direction < TRACTION_DISABLE_RANGE_NMAX)))
      {
        if((p_vector->a_speed > .50) || (p_vector->a_speed < -.50))
        {
          setTractionControlState(false);
        }
      }
    }

    l_speed = (speed * (COSDEG(direction) + SINDEG(direction)));
    r_speed = (speed * (COSDEG(direction) - SINDEG(direction)));

    if (l_speed > 1)
    {
        l_speed = 1;
    }
    else if (l_speed < -1)
    {
        l_speed = -1;
    }
    if (r_speed > 1)
    {
        r_speed = 1;
    }
    else if (r_speed < -1)
    {
        r_speed = -1;
    }

    *p_lSpeed = l_speed;
    *p_rSpeed = r_speed;
}

void WsDriveBaseTank::setTankOutput(float lfSpeed, float lbSpeed,
                                    float rfSpeed, float rbSpeed)
{
    ap_scLF->Set(lfSpeed);
    ap_scLB->Set(lbSpeed);
    ap_scRF->Set(rfSpeed);
    ap_scRB->Set(rbSpeed);

    //printf("S: %6.2f  D: %6.2f  L: %6.2f  R: %6.2f\n", speed, direction, l_speed, r_speed);
    ap_dashboard->setValue(IDX_OUT_DRIVE_FL, ap_scLF->Get());
    ap_dashboard->setValue(IDX_OUT_DRIVE_FR, ap_scRF->Get());
    ap_dashboard->setValue(IDX_OUT_DRIVE_BL, ap_scLB->Get());
    ap_dashboard->setValue(IDX_OUT_DRIVE_BR, ap_scRB->Get());
}

void WsDriveBaseTank::setTractionControlState(bool enabled)
{
    ap_scLF->SetTractionControlState(enabled);
    ap_scLB->SetTractionControlState(enabled);
    ap_scRF->SetTractionControlState(enabled);
    ap_scRB->SetTractionControlState(enabled);
}

