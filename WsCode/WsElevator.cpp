//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang 2009
//  @ File Name : WsElevator.cpp
//  @ Date : 1/29/2009
//  @ Author : 
//
//


#include "WsElevator.h"
#include "WsRelay.h"
#include "DigitalInput.h"

WsElevator::WsElevator(WsRelay* p_relay)
{
    ap_relay = p_relay;
    a_elevatorOffValue = Relay::kOff;
    a_elevatorUpValue = Relay::kForward;
    a_elevatorDownValue = Relay::kReverse;
    a_switchPressed = 0;
    a_switchNotPressed = 1;
    a_useLimitSwitches = true;
}

void WsElevator::assignLimitSwitches(DigitalInput* p_topLimit, DigitalInput* p_bottomLimit)
{
    ap_topSwitch = p_topLimit;
    ap_bottomSwitch = p_bottomLimit;
}

int WsElevator::moveUp(void )
{
    if(ap_relay != NULL)
    {
        /* move up if we're not using limit swiches, top limit switch is missing
           or the limit switch is not triggered */
        if((a_useLimitSwitches == false) ||
           (ap_topSwitch == NULL) ||
           ((ap_topSwitch != NULL) &&
            (ap_topSwitch->Get() == a_switchNotPressed)))
        {
            ap_relay->Set(a_elevatorUpValue);
            return 1;
        }
        else
        {
            ap_relay->Set(a_elevatorOffValue);
            return 0;
        }
    }
    return 0;
}

int WsElevator::moveDown(void )
{
    if(ap_relay != NULL)
    {
        /* move up if we're not using limit swiches, bottom limit switch is missing
           or the limit switch is not triggered */
        if((a_useLimitSwitches == false) ||
           (ap_bottomSwitch == NULL) ||
           ((ap_bottomSwitch != NULL) &&
            (ap_bottomSwitch->Get() == a_switchNotPressed)))
        {
            ap_relay->Set(a_elevatorDownValue);
            return -1;
        }
        else
        {
            ap_relay->Set(a_elevatorOffValue);
            return 0;
        }
    }
    return 0;
}

int WsElevator::turnOff(void )
{
    if(ap_relay != NULL)
    {
        ap_relay->Set(a_elevatorOffValue);
    }
    return 0;
}

int WsElevator::setState(WsElevatorStateT state)
{
    int speed = 0;
    switch(state)
    {
        case ELEVATOR_STATE_OFF:
            speed = turnOff();
            break;
        case ELEVATOR_STATE_UP:
            speed = moveUp();
            break;
        case ELEVATOR_STATE_DOWN:
            speed = moveDown();
            break;
        default:
            speed = turnOff();
            break;
    }
    return speed;
}

void WsElevator::setUseLimitSwitches(bool state)
{
    a_useLimitSwitches = state;
}


bool WsElevator::moveToPosition(WsElevatorPosT position)
{
    bool done = false;
    int speed = 0;
    switch(position)
    {
        case ELEVATOR_POS_BOTTOM:
            if( (ap_bottomSwitch != NULL) &&
                (ap_bottomSwitch->Get() == a_switchNotPressed))
            {
                speed = moveDown();
            }
            else
            {
                speed = turnOff();
                done = true;
            }
            break;
        case ELEVATOR_POS_TOP:
            if((ap_topSwitch != NULL) &&
               (ap_topSwitch->Get() == a_switchNotPressed))
            {
                speed = moveUp();
            }
            else
            {
                speed = turnOff();
                done = true;
            }
            break;
        default:
            speed = turnOff();
            done = true;
            break;
    }

    return done;
}

