//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang
//  @ File Name : WsAutonomousMgr.cpp
//  @ Date : 2/8/2009
//  @ Author : 
//
//


#include "WsAutonomousMgr.h"
#include "WsDsAnalog.h"
#include "WsControllerButton.h"
#include "WsAutoProgramBase.h"

#include "WsAutoSleeper.h"
#include "WsAutoOutpostOutpostLeft.h"
#include "WsAutoOutpostOutpostStraight.h"
#include "WsAutoOutpostOutpostRight.h"
#include "WsAutoParkerHome.h"
#include "WsAutoParkerHomeAlt.h"
#include "WsAutoParkerOpp.h"
#include "WsAutoParkerOppAlt.h"
#include "WsAutoHomeOutpost.h"
#include "WsAutoHomeOutpostAlt.h"
#include "WsAutoOppOutpost.h"
#include "WsAutoOppOutpostAlt.h"
#include "WsAutoOutpostHome.h"
#include "WsAutoOutpostOpp.h"
#include "WsAutoDriveStraight.h"
#include "WsAutoDriveCrawl.h"
#include "WsAutoHomeOpp.h"
#include "WsAutoOppHome.h"
#include "WsDashboard.h"
#include "WsDriverStationLED.h"

#define MAX_NUM_PROG 11
const char progNames[][MAX_NUM_PROG][PROG_NAME_LEN] = {
            { "Sleeper", "HomePark",  "HomeOut",  "Drive 2", "Crawl 2", "HomeOpp", "HomeOut2", "HomePark2", "Sleeper", "Sleeper", "Sleeper"},
            { "Sleeper", "OutToHome", "OutToOpp", "Drive 3", "Crawl 3", "OutOutL", "OutOutS", "OutOutR", "Sleeper", "Sleeper", "Sleeper"},
            { "Sleeper", "OppPark",   "OppOut",   "Drive 5", "Crawl 5", "OppHome", "OppOut2", "OppPark2", "Sleeper", "Sleeper", "Sleeper"},
                                                      };

WsAutonomousMgr::WsAutonomousMgr(WsDsAnalog* p_progNumSelector,
                                 WsDsAnalog* p_positionSelector,
                                 WsControllerButton* p_lockInSwitch,
                                 WsDriverStationLED* p_lockInLed)
{
    ap_progNumSelector = p_progNumSelector;
    ap_positionSelector = p_positionSelector;
    ap_lockInSwitch = p_lockInSwitch;
    ap_lockInLed = p_lockInLed;
    ap_program = NULL;
    ap_driveBase = NULL;
    ap_accumulator = NULL;
    ap_escalator = NULL;
    ap_elevatorLeft = NULL;
    ap_elevatorRight = NULL;
    ap_shooter = NULL;

    a_progNum = 1;
    a_position = START_HOME;
    a_lockedIn = false;

    a_hasRun = false;

    memset(a_progName, 0, PROG_NAME_LEN);
    strncpy(a_progName, "Sleeper", PROG_NAME_LEN);

    ap_dashboard = WsDashboard::getInstance();
}

WsAutonomousMgr::~WsAutonomousMgr()
{
    if(ap_program != NULL)
    {
        delete ap_program;
    }
    ap_program = NULL;
}

void WsAutonomousMgr::assignDriveBase(WsDriveBaseCrabSingle* p_driveBase)
{
    ap_driveBase = p_driveBase;
}

void WsAutonomousMgr::assignAccumulator(WsAccumulator* p_accum)
{
    ap_accumulator = p_accum;
}

void WsAutonomousMgr::assignEscalator(WsEscalator* p_esc)
{
    ap_escalator = p_esc;
}

void WsAutonomousMgr::assignElevators(WsElevator* p_elevLeft, WsElevator* p_elevRight)
{
    ap_elevatorLeft = p_elevLeft;
    ap_elevatorRight = p_elevRight;
}

void WsAutonomousMgr::assignShooter(WsShooter* p_shooter)
{
    ap_shooter = p_shooter;
}

UINT8 WsAutonomousMgr::getProgNum(void)
{
    if(a_lockedIn == true)
    {
        return a_progNum;
    }
    else
    {
        return a_tempProgNum;
    }

}

bool WsAutonomousMgr::getLockState(void)
{
    return a_lockedIn;
}

void WsAutonomousMgr::getProgName(char* p_name)
{
    if(p_name != NULL)
    {
        strncpy(p_name, a_progName, PROG_NAME_LEN);
    }
}

WsAutonomousMgr::StartingPositionT WsAutonomousMgr::getPosition(void)
{
    if(a_lockedIn == true)
    {
        return a_position;
    }
    else
    {
        return a_tempPosition;
    }
}

void WsAutonomousMgr::processLockin(void )
{
    UINT32 progNumValue = 0;
    UINT32 positionValue;
    bool lockInState;
    static bool lockInStatePrev = true;

    progNumValue = ap_progNumSelector->getValue();
    positionValue = ap_positionSelector->getValue();
    lockInState = ap_lockInSwitch->getState();

    //printf("%d %d %d\n", progNumValue, positionValue, lockInState);

    if(lockInState != lockInStatePrev)
    {
        a_lockedIn = lockInState;
    }


    /* Select the program based on the OI input */
    if((progNumValue >= PROG1_MIN) && 
            (progNumValue <  PROG1_MAX))
    {
        a_tempProgNum = 1;
    }
    else if((progNumValue >= PROG2_MIN) && 
            (progNumValue <  PROG2_MAX))
    {
        a_tempProgNum = 2;
    }
    else if((progNumValue >= PROG3_MIN) && 
            (progNumValue <  PROG3_MAX))
    {
        a_tempProgNum = 3;
    }
    else if((progNumValue >= PROG4_MIN) && 
            (progNumValue <  PROG4_MAX))
    {
        a_tempProgNum = 4;
    }
    else if((progNumValue >= PROG5_MIN) && 
            (progNumValue <  PROG5_MAX))
    {
        a_tempProgNum = 5;
    }
    else if((progNumValue >= PROG6_MIN) && 
            (progNumValue <  PROG6_MAX))
    {
        a_tempProgNum = 6;
    }
    else if((progNumValue >= PROG7_MIN) && 
            (progNumValue <  PROG7_MAX))
    {
        a_tempProgNum = 7;
    }
    else if((progNumValue >= PROG8_MIN) && 
            (progNumValue <  PROG8_MAX))
    {
        a_tempProgNum = 8;
    }
#if 0
    else if((progNumValue >= PROG9_MIN) && 
            (progNumValue <  PROG9_MAX))
    {
        a_tempProgNum = 9;
    }
    else if((progNumValue >= PROG10_MIN) && 
            (progNumValue <  PROG10_MAX))
    {
        a_tempProgNum = 10;
    }
    else if((progNumValue >= PROG11_MIN) && 
            (progNumValue <  PROG11_MAX))
    {
        a_tempProgNum = 11;
    }
#endif
    else
    {
        a_tempProgNum = 1;
    }

    /* Select the start position based on the OI input */
    if((positionValue >= POSITION1_MIN) &&
            (positionValue < POSITION1_MAX))
    {
        a_tempPosition = START_HOME;
    }
    else if((positionValue >= POSITION2_MIN) &&
            (positionValue < POSITION2_MAX))
    {
        a_tempPosition = START_OUTPOST;
    }
    else if((positionValue >= POSITION3_MIN) &&
            (positionValue < POSITION3_MAX))
    {
        a_tempPosition = START_OPP;
    }
    else
    {
        a_tempPosition = START_OPP;
    }


    if(lockInState == a_lockInStateOff)
    {
        a_progNum = 1;
    }
    else if((lockInState == a_lockInStateOn) &&
            (lockInStatePrev == a_lockInStateOff))
    {
        a_progNum = a_tempProgNum;
        a_position = a_tempPosition;

        if(a_hasRun == true)
        {
            a_hasRun = false;
        }
    }

    if(a_hasRun == true)
    {
        a_lockedIn = false;
    }

    // DEBUG
    //lockInState = true;
    //a_progNum = 2;
    //a_position = START_HOME;

    if(a_lockedIn == true)
    {
        ap_lockInLed->turnOn();
    }
    else
    {
        ap_lockInLed->blinkNumber(a_tempProgNum);
    }

    memset(a_progName, 0, PROG_NAME_LEN);
    if((a_tempProgNum >= 1) || (a_tempProgNum <= MAX_NUM_PROG))
    {
        strncpy(a_progName, progNames[a_tempPosition][a_tempProgNum - 1], PROG_NAME_LEN);
    }
    else
    {
        strncpy(a_progName, "Sleeper", PROG_NAME_LEN);
    }




    ap_dashboard->setValue(IDX_AUTO_PROGNUM, (UINT32)a_tempProgNum);
    ap_dashboard->setValue(IDX_AUTO_POSITION, (UINT32)a_tempPosition);
    ap_dashboard->setValue(IDX_AUTO_LOCKIN, a_lockedIn);
    ap_dashboard->setValue(IDX_AUTO_PROGSTATE, (UINT32)0);
    ap_dashboard->setValue(IDX_AUTO_DATA1, (float)0);
    ap_dashboard->setValue(IDX_AUTO_DATA2, (float)0);

    lockInStatePrev = lockInState;
}

void WsAutonomousMgr::beginAutonomous(void )
{
    if(a_lockedIn == false)
    {
        a_progNum = 1;
    }

    if(a_position == START_HOME)
    {
        switch(a_progNum)
        {
            case 1:
                ap_program = new WsAutoSleeper();
                break;
            case 2:
                ap_program = new WsAutoParkerHome();
                break;
            case 3:
                ap_program = new WsAutoHomeOutpost();
                break;
            case 4:
                ap_program = new WsAutoDriveStraight(2);
                break;
            case 5:
                ap_program = new WsAutoDriveCrawl(2);
                break;
            case 6:
                ap_program = new WsAutoHomeOpp();
                break;
            case 7:
                ap_program = new WsAutoHomeOutpostAlt();
                break;
            case 8:
                ap_program = new WsAutoParkerHomeAlt();
                break;
            default:
                ap_program = new WsAutoSleeper();
                break;
        }
    }
    else if(a_position == START_OPP)
    {
        switch(a_progNum)
        {
            case 1:
                ap_program = new WsAutoSleeper();
                break;
            case 2:
                ap_program = new WsAutoParkerOpp();
                break;
            case 3:
                ap_program = new WsAutoOppOutpost();
                break;
            case 4:
                ap_program = new WsAutoDriveStraight(5);
                break;
            case 5:
                ap_program = new WsAutoDriveCrawl(5);
                break;
            case 6:
                ap_program = new WsAutoOppHome();
                break;
            case 7:
                ap_program = new WsAutoOppOutpostAlt();
                break;
            case 8:
                ap_program = new WsAutoParkerOppAlt();
                break;
            default:
                ap_program = new WsAutoSleeper();
                break;
        }
    }
    else
    {
        switch(a_progNum)
        {
            case 1:
                ap_program = new WsAutoSleeper();
                break;
            case 2:
                ap_program = new WsAutoOutpostHome();
                break;
            case 3:
                ap_program = new WsAutoOutpostOpp();
                break;
            case 4:
                ap_program = new WsAutoDriveStraight(3);
                break;
            case 5:
                ap_program = new WsAutoDriveCrawl(3);
                break;
            case 6:
                ap_program = new WsAutoOutpostOutpostLeft();
                break;
            case 7:
                ap_program = new WsAutoOutpostOutpostStraight();
                break;
            case 8:
                ap_program = new WsAutoOutpostOutpostRight();
                break;
            default:
                ap_program = new WsAutoSleeper();
                break;
        }
    }

    ap_program->assignDriveBase(ap_driveBase);
    ap_program->assignAccumulator(ap_accumulator);
    ap_program->assignEscalator(ap_escalator);
    ap_program->assignElevators(ap_elevatorLeft, ap_elevatorRight);
    ap_program->assignShooter(ap_shooter);

    if(a_hasRun == true)
    {
        /* If the program has already run,
           turn off everything, delete the program
           and run the sleeper */
        if(ap_program != NULL)
        {
            ap_program->turnOffDriveBase();
            ap_program->turnOffAppendages();
            delete ap_program;
        }
        ap_program = new WsAutoSleeper();
    }

    a_hasRun = true;

    ap_program->initParams();

    ap_dashboard->setValue(IDX_AUTO_PROGNUM, (UINT32)a_progNum);
    ap_dashboard->setValue(IDX_AUTO_POSITION, (UINT32)a_position);
    ap_dashboard->setValue(IDX_AUTO_LOCKIN, a_lockedIn);
}

bool WsAutonomousMgr::run(void )
{
    bool done = true;

    if(ap_program != NULL)
    {
        done = ap_program->run();
    }

    ap_dashboard->setValue(IDX_AUTO_PROGNUM, (UINT32)a_progNum);
    ap_dashboard->setValue(IDX_AUTO_POSITION, (UINT32)a_position);
    ap_dashboard->setValue(IDX_AUTO_LOCKIN, a_lockedIn);

    return done;
}

