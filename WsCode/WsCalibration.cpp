//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Wildstang 2009
//  @ File Name : WsCalibration.cpp
//  @ Date : 1/19/2009
//  @ Author : 
//
//


#include <stdarg.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "WsCalibration.h"

WsCalibration* WsCalibration::ap_instance = NULL;

WsCalibration::WsCalibration()
{
  memset(a_data, 0, sizeof(a_data));
  a_competitionRobot = true;

  readData();
}

WsCalibration::~WsCalibration()
{
    if(ap_instance != NULL)
    {
        delete ap_instance;
    }
    ap_instance = NULL;
}

WsCalibration* WsCalibration::getInstance()
{
  if (ap_instance == NULL)
  {
    ap_instance = new WsCalibration();
  }

  return ap_instance;
}

void WsCalibration::saveData()
{
  FILE *fptr = NULL;
  char buffer[100];
  int idx;

  fptr = fopen(CALIBRATION_FILENAME, "w");

  if (fptr != NULL)
  {
    for (idx = 0; idx < MAX_NUM_VALUES; idx++)
    {
      sprintf(buffer, "%d\n", a_data[idx]);
      fputs(buffer, fptr);
    }

    fflush(fptr);
    fclose(fptr);
  }
}

void WsCalibration::readData()
{
  FILE *fptr = NULL;
  char buffer[100];
  int idx = 0;

  fptr = fopen(CALIBRATION_FILENAME, "r");

  if (fptr != NULL)
  {
    while ((fgets(buffer, sizeof(buffer), fptr) != NULL) &&
           (idx < MAX_NUM_VALUES))
    {
      a_data[idx] = atoi(buffer);
      idx++;
    }

    fclose(fptr);
    fptr = NULL;
  }

  fptr = fopen(PROTO_FILENAME, "r");

  if (fptr != NULL)
  {
    /* file exists, this is not the competition robot */
    a_competitionRobot = false;
    fclose(fptr);
    fptr = NULL;
  }
}

void WsCalibration::printValues()
{
  int idx;

  for (idx = 0; idx < MAX_NUM_VALUES; idx++)
  {
    printf("a_data[%d] %d\n", idx, a_data[idx]);
  }
}

bool WsCalibration::isCompetitionRobot(void )
{
  return a_competitionRobot;
}

UINT32 WsCalibration::getValue(CalibrationIndexT index)
{
  return a_data[index];
}

void WsCalibration::setValue(CalibrationIndexT index, UINT32 value)
{
  a_data[index] = value;
}

